import numpy as np

class LinearRegression:
    def __init__(self):
        self.theta = None
        self.intercept = None
        self.coef = None

    def fit(self, x, y):
        n = len(x)
        m = len(y)

        x_b = np.c_[np.ones((n,1)), x]

        self.theta = np.linalg.pinv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)

        self.intercept = self.theta[0]
        self.coef = self.theta[1:]

    def predict(self, x):
        n = len(x)
        x_b = np.c_[np.ones((n, 1)), x]
        y_pred = x_b.dot(self.theta)
        
        return y_pred

class DGRegression:
    def __init__(self, n_iter = 1000, lil_batch = None, seed = None, eta0 = 0.1):
        self.n_iter = n_iter
        self.lil_batch = lil_batch
        self.seed = seed
        self.eta0 = eta0
        self.theta = None
        self.intercept = None
        self.coef = None

    def Learn(self, epoch, eta0):
        return(eta0/(1 + epoch))

    def predict(self, x):
        n = len(x)
        x_b = np.c_[np.ones((n, 1)), x]
        y_pred = x_b.dot(self.theta)
        
        return y_pre

    def error_calc(self, x_b, y):
        prediction = x_b.dot(self.theta)
        error = np.mean((prediction - y)**2)
        return error

    def fit(self, x, y):
        m, n = x.shape
        x_b = np.c_[np.ones((m,1)), x]
        self.theta = np.random.rand(n+1, 1)
        best_error = float("inf")
        pacience_counter = 0

        if (self.lil_batch is None and self.seed is None):
            for i in range(self.n_iter):
                eta = self.Learn(i, self.eta0)
                grad = (2/m) * x_b.T.dot(x_b.dot(self.theta) - y)
                self.theta -= eta * grad            
                self.intercept = self.theta[0]
                self.coef = self.theta[1:]

        elif(self.lil_batch is not None and self.seed is None):
            for i in range(self.n_iter):
                eta = self.Learn(i, self.eta0)
                index_m = np.random.permutation(m)
                x_bm = x_b[index_m]
                y_m = y[index_m]
                
                for j in range(0, m, self.lil_batch):
                    xi = x_bm[i:i + self.lil_batch]
                    yi = y_m[i:i + self.lil_batch]
                    grad = (2/self.lil_batch) * xi.T.dot(xi.dot(self.theta) - yi)
                    self.theta -= eta * grad            
                    self.intercept = self.theta[0]
                    self.coef = self.theta[1:]

        elif(self.lil_batch is None and self.seed is not None):
            for i in range(self.n_iter):
                eta = self.Learn(i, self.eta0)
                for j in range(m):
                    np.random.seed = self.seed
                    random_index = np.random.randint(m)
                    xi = x_b[random_index : random_index + 1]
                    yi = y[random_index : random_index + 1]
                    grad = 2 * xi.T.dot(xi.dot(self.theta) - yi)
                    self.theta -= eta * grad            
                    self.intercept = self.theta[0]
                    self.coef = self.theta[1:]
        